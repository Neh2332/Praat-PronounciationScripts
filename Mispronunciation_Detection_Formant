# Script 3: Mispronunciation Detection (Vowel Formant Based)
# Compares F1/F2 formants at relative time points to detect likely mispronunciations.

# --- File Selection ---
pauseScript: "Click OK to select the REFERENCE sound file (correct pronunciation)"
reference$ = chooseReadFile$: "Select reference sound file"
if reference$ = ""
    exitScript: "No reference file selected. Script terminated."
endif
reference = Read from file: reference$
reference_name$ = selected$("Sound")

pauseScript: "Click OK to select the USER sound file (pronunciation to evaluate)"
user$ = chooseReadFile$: "Select user sound file"
if user$ = ""
    exitScript: "No user file selected. Script terminated."
endif
user = Read from file: user$
user_name$ = selected$("Sound")

# --- Analysis ---
# Get durations for time point calculation
selectObject: reference
ref_duration = Get total duration
selectObject: user
user_duration = Get total duration

# Create formant objects
selectObject: reference
To Formant (burg): 0, 5, 5500, 0.025, 50
reference_formant = selected("Formant")

selectObject: user
To Formant (burg): 0, 5, 5500, 0.025, 50
user_formant = selected("Formant")

# Calculate vowel formant differences at relative time points
time_ref_25 = ref_duration * 0.25
time_ref_50 = ref_duration * 0.5
time_ref_75 = ref_duration * 0.75

time_user_25 = user_duration * 0.25
time_user_50 = user_duration * 0.5
time_user_75 = user_duration * 0.75

selectObject: reference_formant
ref_f1_25 = Get value at time: 1, time_ref_25, "Hertz", "Linear"
ref_f2_25 = Get value at time: 2, time_ref_25, "Hertz", "Linear"
ref_f1_50 = Get value at time: 1, time_ref_50, "Hertz", "Linear"
ref_f2_50 = Get value at time: 2, time_ref_50, "Hertz", "Linear"
ref_f1_75 = Get value at time: 1, time_ref_75, "Hertz", "Linear"
ref_f2_75 = Get value at time: 2, time_ref_75, "Hertz", "Linear"

selectObject: user_formant
user_f1_25 = Get value at time: 1, time_user_25, "Hertz", "Linear"
user_f2_25 = Get value at time: 2, time_user_25, "Hertz", "Linear"
user_f1_50 = Get value at time: 1, time_user_50, "Hertz", "Linear"
user_f2_50 = Get value at time: 2, time_user_50, "Hertz", "Linear"
user_f1_75 = Get value at time: 1, time_user_75, "Hertz", "Linear"
user_f2_75 = Get value at time: 2, time_user_75, "Hertz", "Linear"

# Calculate average percentage formant differences
f1_diff_total = 0
f2_diff_total = 0
f1_points = 0
f2_points = 0

# Point 1 (25%)
if ref_f1_25 <> undefined and user_f1_25 <> undefined and ref_f1_25 > 0
    f1_diff_total += abs(ref_f1_25 - user_f1_25) / ref_f1_25
    f1_points += 1
endif
if ref_f2_25 <> undefined and user_f2_25 <> undefined and ref_f2_25 > 0
    f2_diff_total += abs(ref_f2_25 - user_f2_25) / ref_f2_25
    f2_points += 1
endif

# Point 2 (50%)
if ref_f1_50 <> undefined and user_f1_50 <> undefined and ref_f1_50 > 0
    f1_diff_total += abs(ref_f1_50 - user_f1_50) / ref_f1_50
    f1_points += 1
endif
if ref_f2_50 <> undefined and user_f2_50 <> undefined and ref_f2_50 > 0
    f2_diff_total += abs(ref_f2_50 - user_f2_50) / ref_f2_50
    f2_points += 1
endif

# Point 3 (75%)
if ref_f1_75 <> undefined and user_f1_75 <> undefined and ref_f1_75 > 0
    f1_diff_total += abs(ref_f1_75 - user_f1_75) / ref_f1_75
    f1_points += 1
endif
if ref_f2_75 <> undefined and user_f2_75 <> undefined and ref_f2_75 > 0
    f2_diff_total += abs(ref_f2_75 - user_f2_75) / ref_f2_75
    f2_points += 1
endif

# Calculate average percentage differences
avg_f1_diff_percent = if f1_points > 0 then (f1_diff_total / f1_points) * 100 else undefined endif
avg_f2_diff_percent = if f2_points > 0 then (f2_diff_total / f2_points) * 100 else undefined endif
avg_formant_diff_percent = undefined
if avg_f1_diff_percent <> undefined and avg_f2_diff_percent <> undefined
    avg_formant_diff_percent = (avg_f1_diff_percent + avg_f2_diff_percent) / 2
endif

# --- Detection Logic ---
# Mispronunciation is likely if average formant difference exceeds a threshold (e.g., 20-25%)
mispronunciation_threshold_percent = 25

mispronunciation_likely = 0
if avg_formant_diff_percent <> undefined and avg_formant_diff_percent > mispronunciation_threshold_percent
    mispronunciation_likely = 1
endif

# --- Output ---
clearinfo
appendInfoLine: "MISPRONUNCIATION DETECTION (Formant Based)"
appendInfoLine: "=========================================="
appendInfoLine: "Reference file: ", reference_name$
appendInfoLine: "User file: ", user_name$
appendInfoLine: ""
if avg_formant_diff_percent <> undefined
    appendInfoLine: "Average F1 Difference: ", fixed$(avg_f1_diff_percent, 1), "%"
    appendInfoLine: "Average F2 Difference: ", fixed$(avg_f2_diff_percent, 1), "%"
    appendInfoLine: "Overall Average Formant Difference: ", fixed$(avg_formant_diff_percent, 1), "%"
    appendInfoLine: "(Comparison based on ", f1_points," F1 points and ", f2_points," F2 points)"
    appendInfoLine: ""
    appendInfoLine: "Detection Result: ", if mispronunciation_likely then "LIKELY Mispronunciations Detected" else "Mispronunciations Not Detected" endif
    if mispronunciation_likely
        appendInfoLine: "   Reason: Average formant difference (", fixed$(avg_formant_diff_percent, 1), "%) exceeds threshold (", mispronunciation_threshold_percent, "%)."
    endif
else
    appendInfoLine: "Could not calculate formant differences (insufficient valid formant points)."
    appendInfoLine: ""
    appendInfoLine: "Detection Result: Undetermined"
endif

# --- Cleanup ---
removeObject: reference, user, reference_formant, user_formant

appendInfoLine: ""
appendInfoLine: "Script finished."